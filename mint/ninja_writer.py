from __future__ import annotations

from pathlib import Path
from typing import List

CPP_RULE = """
rule cpp_compile
  command = {compiler} -MMD -MF $out.d -c $in -o $out {cxxflags}
  depfile = $out.d
  deps = gcc
"""

LINK_RULE = """
rule cpp_link
  command = {compiler} -o $out $in {ldflags}
"""

class NinjaWriter:
    def __init__(self, root: Path, build_dir: Path, compiler: str, cxxflags: str, ldflags: str):
        self.root = root
        self.build_dir = build_dir
        self.compiler = compiler
        self.cxxflags = cxxflags
        self.ldflags = ldflags
        self.lines: List[str] = []
        # allow external rule/build lists
        self.external_rules: List[str] = []
        self.external_builds: List[str] = []

    def header(self):
        self.lines.append(f"# Generated by mint\n")
        self.lines.append(f"cxx = {self.compiler}\n")

    def rules(self):
        # built-in C++ rules
        self.lines.append(CPP_RULE.format(compiler="$cxx", cxxflags=self.cxxflags))
        self.lines.append(LINK_RULE.format(compiler="$cxx", ldflags=self.ldflags))
        # append any external rules (from other toolchains)
        for r in self.external_rules:
            self.lines.append(r + "\n")

    def build(self, sources: List[Path], exe: Path):
        obj_lines = []
        for src in sources:
            rel = src.relative_to(self.root)
            obj = self.build_dir / "obj" / rel.with_suffix(".o")
            obj.parent.mkdir(parents=True, exist_ok=True)
            self.lines.append(f"build {obj}: cpp_compile {src}\n")
            obj_lines.append(str(obj))
        self.lines.append(f"build {exe}: cpp_link {' '.join(obj_lines)}\n")
        self.lines.append(f"default {exe}\n")
        # append external build statements
        for b in self.external_builds:
            self.lines.append(b + "\n")

    def write(self):
        ninja_file = self.build_dir / "build.ninja"
        ninja_file.parent.mkdir(parents=True, exist_ok=True)
        ninja_file.write_text("".join(self.lines))
        return ninja_file 